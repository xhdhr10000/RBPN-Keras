DataParallel(
  (module): Net(
    (feat0): ConvBlock(
      (conv): Conv2d(3, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): PReLU(num_parameters=1)
    )
    (feat1): ConvBlock(
      (conv): Conv2d(8, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): PReLU(num_parameters=1)
    )
    (DBPN): Net(
      (feat1): ConvBlock(
        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (up1): UpBlock(
        (up_conv1): DeconvBlock(
          (deconv): ConvTranspose2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (up_conv2): ConvBlock(
          (conv): Conv2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (up_conv3): DeconvBlock(
          (deconv): ConvTranspose2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
      )
      (down1): DownBlock(
        (down_conv1): ConvBlock(
          (conv): Conv2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (down_conv2): DeconvBlock(
          (deconv): ConvTranspose2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (down_conv3): ConvBlock(
          (conv): Conv2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
      )
      (up2): UpBlock(
        (up_conv1): DeconvBlock(
          (deconv): ConvTranspose2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (up_conv2): ConvBlock(
          (conv): Conv2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (up_conv3): DeconvBlock(
          (deconv): ConvTranspose2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
      )
      (down2): DownBlock(
        (down_conv1): ConvBlock(
          (conv): Conv2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (down_conv2): DeconvBlock(
          (deconv): ConvTranspose2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (down_conv3): ConvBlock(
          (conv): Conv2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
      )
      (up3): UpBlock(
        (up_conv1): DeconvBlock(
          (deconv): ConvTranspose2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (up_conv2): ConvBlock(
          (conv): Conv2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
        (up_conv3): DeconvBlock(
          (deconv): ConvTranspose2d(64, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
          (act): PReLU(num_parameters=1)
        )
      )
      (output): ConvBlock(
        (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (res_feat1): Sequential(
      (0): ResnetBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (1): ResnetBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (2): ResnetBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (3): ResnetBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (4): ResnetBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (5): DeconvBlock(
        (deconv): ConvTranspose2d(256, 64, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
        (act): PReLU(num_parameters=1)
      )
    )
    (res_feat2): Sequential(
      (0): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (1): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (2): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (3): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (4): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (5): ConvBlock(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
    )
    (res_feat3): Sequential(
      (0): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (1): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (2): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (3): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (4): ResnetBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): PReLU(num_parameters=1)
      )
      (5): ConvBlock(
        (conv): Conv2d(64, 256, kernel_size=(8, 8), stride=(4, 4), padding=(2, 2))
        (act): PReLU(num_parameters=1)
      )
    )
    (output): ConvBlock(
      (conv): Conv2d(384, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
)